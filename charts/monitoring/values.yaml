mimir:
  enabled: true
  mimir:
    structuredConfig:
      common:
        storage:
          backend: s3
          s3:
            bucket_name: mimir
            endpoint: minio.minio-tenant.svc.cluster.local
            access_key_id: storage-user
            secret_access_key: ""
            http:
              insecure_skip_verify: true
      blocks_storage:
        backend: s3
        s3:
          bucket_name: mimir-blocks
        tsdb:
          retention_period: 168h
          ship_interval: 15s

      alertmanager_storage:
        backend: s3
        s3:
          bucket_name: mimir-alertmanager

      ruler_storage:
        backend: s3
        s3:
          bucket_name: mimir-ruler
  minio:
    enabled: false
  alertmanager:
    resources:
      requests:
        cpu: 20m
  compactor:
    resources:
      requests:
        cpu: 20m
  distributor:
    resources:
      requests:
        cpu: 20m
  ingester:
    replicas: 1
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  overrides_exporter:
    resources:
      requests:
        cpu: 20m
  querier:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  query_frontend:
    resources:
      requests:
        cpu: 20m
  query_scheduler:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  ruler:
    resources:
      requests:
        cpu: 20m
  store_gateway:
    zoneAwareReplication:
      enabled: false
    resources:
      requests:
        cpu: 20m
  rollout_operator:
    resources:
      requests:
        cpu: 20m

loki:
  enabled: false
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ingester:
      chunk_encoding: snappy
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
      chunk_idle_period: 10s
      chunk_retain_period: 20s
      max_chunk_age: 30s
    tracing:
      enabled: true
    querier:
      max_concurrent: 2
    storage:
      type: s3
      bucketNames:
        chunks: loki-chunks
        ruler: loki-ruler
        admin: loki-admin
      s3:
        # s3 URL can be used to specify the endpoint, access key, secret key, and bucket name this works well for S3 compatible storage or if you are hosting Loki on-premises and want to use S3 as the storage backend. Either use the s3 URL or the individual fields below (AWS endpoint, region, secret).
        endpoint: minio.minio-tenant.svc.cluster.local
        # AWS secret access key
        secretAccessKey: ""
        # AWS access key ID
        accessKeyId: storage-user
        # AWS signature version (e.g., v2 or v4)
        signatureVersion: v4
        # Forces the path style for S3 (true/false)
        s3ForcePathStyle: true
        # Allows insecure (HTTP) connections (true/false)
        insecure: false
        http_config:
          insecure_skip_verify: true  # Skip TLS certificate verification

  deploymentMode: SingleBinary

  singleBinary:
    autoscaling:
      # -- Enable autoscaling
      enabled: true
      # -- Minimum autoscaling replicas for the single binary
      minReplicas: 1
      # -- Maximum autoscaling replicas for the single binary
      maxReplicas: 3
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 3
        memory: 4Gi
      requests:
        cpu: 2
        memory: 2Gi
    extraEnv:
      # Keep a little bit lower than memory limits
      - name: GOMEMLIMIT
        value: 3750MiB

  chunksCache:
    # default is 500MB, with limited memory keep this smaller
    writebackSizeLimit: 10MB

  # Enable minio for storage
  minio:
    enabled: false

  # Zero out replica counts of other deployment modes
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

tempo:
  enabled: false
  minio:
    enabled: false
  ingester:
    replicas: 1
    resources:
      requests:
        cpu: 20m
  storage:
    trace:
      backend: s3
      s3:
        bucket: 'tempo-traces'
        endpoint: minio.minio-tenant.svc.cluster.local
        access_key: storage-user
        secret_key: ""
        insecure: false
        tls_insecure_skip_verify: true
        forcepathstyle: true
  distributor:
    replicas: 1
  traces:
    otlp:
      grpc:
        enabled: true
      http:
        enabled: true
    zipkin:
      enabled: false
    jaeger:
      thriftHttp:
        enabled: false
    opencensus:
      enabled: false

grafana:
  enabled: false
  serviceMonitor:
    enabled: true
  service:
    port: 8080
  persistence:
    enabled: true
    size: 8Gi
  httpRoute:
    enabled: true
    hostnames:
      - grafana.dev.tradecrit.com
    parentRefs:
      - name: istio-gateway
        kind: Gateway
        namespace: istio-ingress
        sectionName: https-wildcard
    matches:
      - path:
          type: PathPrefix
          value: /
    filters: [ ]
    backendRefs:
      - name: grafana
        namespace: monitoring
        kind: Service
        port: 8080
  admin:
    existingSecret: "grafana-admin-credentials"
    userKey: admin-user
    passwordKey: admin-password
  extraObjects:
    - apiVersion: secrets.infisical.com/v1alpha1
      kind: InfisicalSecret
      metadata:
        name: grafana-admin-credentials
        namespace: monitoring
      spec:
        hostAPI: https://app.infisical.com/api
        resyncInterval: 10
        authentication:
          universalAuth:
            secretsScope:
              projectSlug: development-ko-nv
              envSlug: dev
              secretsPath: "/grafana"
              recursive: true
            credentialsRef:
              secretName: universal-auth-credentials
              secretNamespace: infisical
        managedSecretReference:
          secretName: grafana-admin-credentials
          secretNamespace: monitoring
          creationPolicy: "Owner" ## Owner | Orphan
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          access: proxy
          uid: loki
          url: http://grafana-loki:3100
