kube-prometheus-stack:
  crds:
    enabled: true
  prometheus:
    enabled: true
    prometheusSpec:
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: microk8s-hostpath
            persistentVolumeReclaimPolicy: Delete
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 50Gi
  alertmanager:
    enabled: true
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: microk8s-hostpath
            persistentVolumeReclaimPolicy: Delete
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
  kube-state-metrics:
    enabled: true
  nodeExporter:
    enabled: true
  grafana:
    enabled: false
  prometheus-windows-exporter:
    prometheus:
      monitor:
        enabled: false

alloy:
  enabled: true
  configReloader:
    enabled: true
  alloy:
    configMap:
      create: false
      name: alloy-config
      key: config.alloy
    extraPorts:
      - name: grpc
        port: 4317
        targetPort: 4317
        protocol: TCP
      - name: http
        port: 4318
        targetPort: 4318
        protocol: TCP

loki:
  enabled: true
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1
    storage:
      type: filesystem
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    ingester:
      chunk_encoding: snappy
      lifecycler:
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
      chunk_idle_period: 10s
      chunk_retain_period: 20s
      max_chunk_age: 30s
    tracing:
      enabled: true
    querier:
      max_concurrent: 2
  deploymentMode: SingleBinary
  singleBinary:
    autoscaling:
      enabled: false
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 3
        memory: 4Gi
      requests:
        cpu: 2
        memory: 2Gi
    extraEnv:
      # Keep a little bit lower than memory limits
      - name: GOMEMLIMIT
        value: 3750MiB
  chunksCache:
    writebackSizeLimit: 10MB
  minio:
    enabled: false
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0
  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

tempo:
  enabled: true
  tempo:
    receivers:
      jaeger: {}
      opencensus: {}
  persistence:
    enabled: true
    size: 20Gi
    enableStatefulSetAutoDeletePVC: true

grafana:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
  service:
    port: 8080
  persistence:
    enabled: true
    size: 8Gi
  dashboardProviders: {}
#    dashboardproviders.yaml:
#      apiVersion: 1
#      providers:
#      - name: 'default'
#        orgId: 1
#        folder: ''
#        type: file
#        disableDeletion: false
#        editable: true
#        options:
#          path: /var/lib/grafana/dashboards/default
  dashboards: {}
  httpRoute:
    enabled: true
    hostnames:
      - grafana.dev.tradecrit.com
    parentRefs:
      - name: istio-gateway
        kind: Gateway
        namespace: istio-ingress
        sectionName: https-wildcard
    matches:
      - path:
          type: PathPrefix
          value: /
    filters: [ ]
    backendRefs:
      - name: grafana
        namespace: monitoring
        kind: Service
        port: 8080
  admin:
    existingSecret: "grafana-admin-credentials"
    userKey: admin-user
    passwordKey: admin-password
  extraObjects:
    - apiVersion: secrets.infisical.com/v1alpha1
      kind: InfisicalSecret
      metadata:
        name: grafana-admin-credentials
        namespace: monitoring
      spec:
        hostAPI: https://app.infisical.com/api
        resyncInterval: 10
        authentication:
          universalAuth:
            secretsScope:
              projectSlug: development-ko-nv
              envSlug: dev
              secretsPath: "/grafana"
              recursive: true
            credentialsRef:
              secretName: universal-auth-credentials
              secretNamespace: infisical
        managedSecretReference:
          secretName: grafana-admin-credentials
          secretNamespace: monitoring
          creationPolicy: "Owner" ## Owner | Orphan
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Loki
          type: loki
          access: proxy
          uid: loki
          url: http://grafana-loki:3100
          jsonData:
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: "^.*?traceI[d|D]=(\\w+).*$"
                name: traceId
                url: '$${__value.raw}'
        - name: Tempo
          type: tempo
          access: proxy
          uid: tempo
          default: true
          url: http://grafana-tempo:3100
          jsonData:
            nodeGraph:
              enabled: true
            serviceMap:
              datasourceUid: prometheus
            tracesToLogs:
              datasourceUid: loki
              filterByTraceID: false
              spanEndTimeShift: "500ms"
              spanStartTimeShift: "-500ms"
        - name: Prometheus
          type: prometheus
          access: proxy
          uid: prometheus
          url: http://grafana-kube-prometheus-st-prometheus:9090
          jsonData:
            exemplarTraceIdDestinations:
              - datasourceUid: tempo
                name: traceID
            httpMethod: POST
            timeInterval: "2s"
