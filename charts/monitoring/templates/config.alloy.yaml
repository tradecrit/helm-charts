apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
data:
  config.alloy: |
    // Global configuration, this is required to ingest the default k8s metrics via the node exporter and kube state metrics.
    prometheus.scrape "cluster_targets" {
        targets = [
          {"__address__" = "grafana:8080", "service_name"="grafana"},
          {"__address__" = "grafana-alloy:12345", "service_name"="alloy"},
          {"__address__" = "grafana-kube-state-metrics:8080", "cluster"="development" },
          {"__address__" = "grafana-prometheus-node-exporter:9100" },
          {"__address__" = "grafana-loki:3100", service_name="loki" },
          {"__address__" = "grafana-tempo-query-frontend:3100", service_name="tempo" },
        ]
      honor_labels = true
      scrape_interval = "15s"
      forward_to = [prometheus.relabel.add_labels.receiver]
    }

    prometheus.relabel "add_labels" {
      forward_to = [
        prometheus.remote_write.mimir.receiver,
      ]
      rule {
        action       = "replace"
        target_label = "cluster"
        replacement  = "development"
      }
    }

    // Kubernetes
    discovery.kubernetes "pod" {
        role = "pod"
    }
    prometheus.scrape "pod" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.pod.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    discovery.kubernetes "service" {
        role = "service"
    }
    prometheus.scrape "service" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.service.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    discovery.kubernetes "node" {
        role = "node"
    }
    prometheus.scrape "node" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.node.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    discovery.kubernetes "endpoints" {
        role = "endpoints"
    }
    prometheus.scrape "endpoints" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.endpoints.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    discovery.kubernetes "endpointslice" {
      role = "endpointslice"
    }
    prometheus.scrape "endpointslice" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.endpointslice.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    discovery.kubernetes "ingress" {
      role = "ingress"
    }
    prometheus.scrape "ingress" {
      honor_labels = true
      scrape_interval = "15s"
      targets    = discovery.kubernetes.ingress.targets
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    // OTEL CONFIGURATION
    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "127.0.0.1:4317"
      }

        http {
        endpoint = "127.0.0.1:4318"
      }

      output {
          metrics = [otelcol.processor.resourcedetection.default.input]
          logs    = [otelcol.processor.resourcedetection.default.input]
          traces  = [otelcol.processor.resourcedetection.default.input]
      }
    }

    otelcol.processor.resourcedetection "default" {
        detectors = ["env", "system"]

        system {
            hostname_sources = ["os"]
        }

        output {
            metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
            logs    = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
            traces  = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
        }
    }

    otelcol.processor.transform "drop_unneeded_resource_attributes" {
        // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.transform/
        error_mode = "ignore"

        trace_statements {
            context    = "resource"
            statements = [
                "delete_key(attributes, \"k8s.pod.start_time\")",
                "delete_key(attributes, \"os.description\")",
                "delete_key(attributes, \"os.type\")",
                "delete_key(attributes, \"process.command_args\")",
                "delete_key(attributes, \"process.executable.path\")",
                "delete_key(attributes, \"process.pid\")",
                "delete_key(attributes, \"process.runtime.description\")",
                "delete_key(attributes, \"process.runtime.name\")",
                "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        metric_statements {
            context    = "resource"
            statements = [
                "delete_key(attributes, \"k8s.pod.start_time\")",
                "delete_key(attributes, \"os.description\")",
                "delete_key(attributes, \"os.type\")",
                "delete_key(attributes, \"process.command_args\")",
                "delete_key(attributes, \"process.executable.path\")",
                "delete_key(attributes, \"process.pid\")",
                "delete_key(attributes, \"process.runtime.description\")",
                "delete_key(attributes, \"process.runtime.name\")",
                "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        log_statements {
            context    = "resource"
            statements = [
                "delete_key(attributes, \"k8s.pod.start_time\")",
                "delete_key(attributes, \"os.description\")",
                "delete_key(attributes, \"os.type\")",
                "delete_key(attributes, \"process.command_args\")",
                "delete_key(attributes, \"process.executable.path\")",
                "delete_key(attributes, \"process.pid\")",
                "delete_key(attributes, \"process.runtime.description\")",
                "delete_key(attributes, \"process.runtime.name\")",
                "delete_key(attributes, \"process.runtime.version\")",
            ]
        }

        output {
            metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]
            logs    = [otelcol.processor.batch.default.input]
            traces  = [
                otelcol.processor.batch.default.input,
                otelcol.connector.host_info.default.input,
            ]
        }
    }

    otelcol.connector.host_info "default" {
        host_identifiers = ["host.name"]

        output {
            metrics = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.transform "add_resource_attributes_as_metric_attributes" {
        error_mode = "ignore"

        metric_statements {
        context    = "datapoint"
        statements = [
            "set(attributes[\"deployment.environment\"], resource.attributes[\"deployment.environment\"])",
            "set(attributes[\"service.version\"], resource.attributes[\"service.version\"])",
            ]
        }

        output {
            metrics = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.batch "default" {
      output {
          metrics = [otelcol.exporter.prometheus.default.input]
          logs    = [otelcol.exporter.loki.default.input]
          traces  = [otelcol.exporter.otlp.default.input]
        }
    }

    otelcol.exporter.prometheus "default" {
      forward_to = [prometheus.remote_write.mimir.receiver]
    }

    otelcol.exporter.loki "default" {
      forward_to = [loki.write.default.receiver]
    }

    // Tells Alloy where to export via the batch processor all logs/traces/metrics.
    otelcol.exporter.otlp "default" {
      client {
          endpoint = "grafana-tempo.monitoring.svc:4317"
          tls {
              insecure = true
          }
        }
    }

    prometheus.remote_write "mimir" {
      endpoint {
        url = "http://grafana-mimir-nginx.monitoring.svc:80/api/v1/push"
      }
    }

    loki.write "default" {
      endpoint {
        url = "http://grafana-loki.monitoring.svc:3100/loki/api/v1/push"
      }
    }
